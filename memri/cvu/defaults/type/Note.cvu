[session = all-notes] {
    [view] {
        title: "All Notes"
        [datasource = pod] {
            query: "Note"
        }
    }
}

Note {
    title: {{.title or "Untitled" }}
    defaultRenderer: custom
    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "Show Timeline"
            
            view: {
                defaultRenderer: timeline
                
                [datasource = pod] {
                    query: "AuditItem appliesTo:{.id}"
                    sortProperty: dateCreated
                    sortAscending: true
                }
                
                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
    ]
    
    contextPane {
        buttons: star schedule
        
        actions: [
            showOverlay { title: "Share with..." }
            addToPanel { title: "Add to list..." }
            duplicate { title: "Duplicate Note" }
        ]
        
        navigate: [
            openView {
                title: "Timeline of this note"
                view: {
                    defaultRenderer: timeline
                    
                    [datasource = pod] {
                        query: "AuditItem appliesTo:{.id}"
                        sortProperty: dateCreated
                        sortAscending: true
                    }
                    
                    [renderer = timeline] {
                        timeProperty: dateCreated
                    }
                }
            }
            openViewByName {
                title: "Starred notes"
                viewName: "filter-starred"
                viewArguments: {
                    include: "all-notes"
                }
            }
            openSessionByName {
                title: "All notes"
                sessionName: "all-notes"
            }
        ]
    }
    
    [renderer = custom] {
        RichTextfield {
            content: {{.content}}
            title: {{.title}}
            titleHint: "Untitled Note"
            fontSize: 18
        }
    }
}

Note[] {
    name: "all-notes"
    title: "All Notes"
    emptyResultText: "There are no notes here yet"
    defaultRenderer: list
    sortFields: title dateModified dateAccessed dateCreated
    
    [datasource = pod] {
        query: "Note"
        sortProperty: dateModified
        sortAscending: false
    }
    
    actionButton:
        addItem {
            template {
                _type: Note
            }
        }
        
    editActionButton: toggleEditMode
    filterButtons: showStarred toggleFilterPanel
    
    [renderer = list] {
        contextMenu: [
            showOverlay { title: "Share" }
            addToPanel { title: "Add to list" }
            duplicate { title: "Duplicate" }
        ]
        
        VStack {
            alignment: left
            spacing: 3
            
            HStack {
                align: left
                
                Text {
                    text: {{.title or "Untitled Note"}}
					lineLimit: 1
                    font: 18 semibold
                    color: #333
                    padding: 0 0 0 0
                }
                Image {
                    systemName: "star.fill"
                    font: 14
                    color: #eecc00
                    margin: 5
                    show: {{.starred}}
                }
            }
            Text {
                text: "{.content.plainString}"
				lineLimit: 1
                removeWhiteSpace: true
                maxChar: 100
                color: #555
                font: 14 regular
            }
            Text {
                text: "{.dateModified}"
				lineLimit: 1
                font: 11 regular
                color: #888
                padding: 0 0 0 0
            }
        }
    }
            
    [renderer = thumbnail] {
        edgeInset: 10 10 10 10
        spacing: 10
        
        VStack {
            minWidth: 10
            padding: 0 0 5 0
            alignment: center
            
            Text {
                text: "{.content.plainString}"
                allowNil: true
                maxChar: 100
                color: #333
                background: #fff
                border: #efefef 2
                cornerRadius: 10
                padding: 10
                font: 9 regular
                minHeight: 40
                idealHeight: 80
                align: left top
            }
            HStack {
                align: center
                Text {
                    text: {{.title or "Untitled Note"}}
                    padding: 5 0 0 0
                    color: #333
                    font: 12 semibold
                    maxChar: 100
                }
                Image {
                    systemName: "star.fill"
                    font: 10
                    color: #eecc00
                    margin: 8 0 0 2
                    show: {{.starred}}
                }
            }
            Text {
                text: "{.dateModified}"
                font: 9 regular
                color: #888
                padding: 3 0 0 0
            }
        }
    }
    
	[renderer = calendar] {
		background: #FFF
		color: #FF0000 /* set the primary color to red */
	}
	
	[renderer = calendar.timeline] {
		dateTime: {{.dateModified}}
        detailLevel: hour

		TimelineItem {
			icon: "square.and.pencil"
			title: {{.title or "Untitled Note"}}
			text: {{.content.plainString}}
		}
	}
	
	[renderer = messages] {
		background: #D3E4D1
		spacing: 8
		
        send: sendMessage {
            network: {{.whatsapp}}
            contents: {{composedText}}
        }
        
		MessageBubble {
			sender: {{.title}}
			content: {{.content.plainString}}
			dateTime: {{.dateModified}}
			isOutgoing: {{.title = "To read list"}} /* This is just a demo until we have a Message type in the schema... */
		}
	}
    
    [renderer = email] {
        background: #D3E4D1
        content: {{.content}}
        
        EmailHeader {
            color: #000000
            title: {{.title}}
            subtitle: "Testing out email renderer"
            rightSubtitle: {{.dateModified}}
        }
    }
}
