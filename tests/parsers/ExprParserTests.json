{
  "testArithmeticOperators": {
    "snippet": "(5 + 10 * 4 - 3 / 10) / 10",
    "result": "BinaryOpNode(Division, lhs: BinaryOpNode(Minus, lhs: BinaryOpNode(Plus, lhs: NumberNode(5.0), rhs: BinaryOpNode(Multiplication, lhs: NumberNode(10.0), rhs: NumberNode(4.0))), rhs: BinaryOpNode(Division, lhs: NumberNode(3.0), rhs: NumberNode(10.0))), rhs: NumberNode(10.0))"
  },
  "testAnd": {
    "snippet": "true and false",
    "result": "BinaryOpNode(ConditionAND, lhs: BoolNode(true), rhs: BoolNode(false))"
  },
  "testOr": {
    "snippet": "true or false",
    "result": "BinaryOpNode(ConditionOR, lhs: BoolNode(true), rhs: BoolNode(false))"
  },
  "testSimpleCondition": {
    "snippet": "true ? 'yes' : 'no'",
    "result": "ConditionNode(condition: BoolNode(true), trueExp: StringNode(yes), falseExp: StringNode(no))"
  },
  "testMultiCondition": {
    "snippet": "true ? false and true ? -1 : false or true ? 'yes' : 'no' : -1",
    "result": "ConditionNode(condition: BoolNode(true), trueExp: ConditionNode(condition: BinaryOpNode(ConditionAND, lhs: BoolNode(false), rhs: BoolNode(true)), trueExp: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(1.0)), falseExp: ConditionNode(condition: BinaryOpNode(ConditionOR, lhs: BoolNode(false), rhs: BoolNode(true)), trueExp: StringNode(yes), falseExp: StringNode(no))), falseExp: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(1.0)))"
  },
  "testConditionEquals": {
    "snippet": "true = false",
    "result": "BinaryOpNode(ConditionEquals, lhs: BoolNode(true), rhs: BoolNode(false))"
  },
  "testConditionNotEquals": {
    "snippet": "true != false",
    "result": "BinaryOpNode(ConditionNotEquals, lhs: BoolNode(true), rhs: BoolNode(false))"
  },
  "testConditionGreaterThan": {
    "snippet": "5 > 10",
    "result": "BinaryOpNode(ConditionGreaterThan, lhs: NumberNode(5.0), rhs: NumberNode(10.0))"
  },
  "testConditionGreaterThanOrEqual": {
    "snippet": "5 >= 10",
    "result": "BinaryOpNode(ConditionGreaterThanOrEqual, lhs: NumberNode(5.0), rhs: NumberNode(10.0))"
  },
  "testConditionLessThan": {
    "snippet": "5 < 10",
    "result": "BinaryOpNode(ConditionLessThan, lhs: NumberNode(5.0), rhs: NumberNode(10.0))"
  },
  "testConditionLessThanOrEqual": {
    "snippet": "5 <= 10",
    "result": "BinaryOpNode(ConditionLessThanOrEqual, lhs: NumberNode(5.0), rhs: NumberNode(10.0))"
  },
  "testLookup": {
    "snippet": ".bar and bar.foo(10) and bar[foo = 10] or shouldNeverGetHere",
    "result": "BinaryOpNode(ConditionAND, lhs: BinaryOpNode(ConditionAND, lhs: LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(bar, type:propertyOrItem, list:single)]), rhs: CallNode(lookup: LookupNode([VariableNode(bar, type:propertyOrItem, list:single), VariableNode(foo, type:propertyOrItem, list:single)]), argument: [NumberNode(10.0)])), rhs: BinaryOpNode(ConditionOR, lhs: LookupNode([VariableNode(bar, type:propertyOrItem, list:list), LookupNode([BinaryOpNode(ConditionEquals, lhs: LookupNode([VariableNode(foo, type:propertyOrItem, list:single)]), rhs: NumberNode(10.0))])]), rhs: LookupNode([VariableNode(shouldNeverGetHere, type:propertyOrItem, list:single)])))"
  },
  "testDotLookup": {
    "snippet": ".",
    "result": "LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single)])"
  },
  "testMinusPlusModifier": {
    "snippet": "-5 + -(5+10) - +'5'",
    "result": "BinaryOpNode(Minus, lhs: BinaryOpNode(Plus, lhs: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(5.0)), rhs: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: BinaryOpNode(Plus, lhs: NumberNode(5.0), rhs: NumberNode(10.0)))), rhs: NumberExpressionNode(StringNode(5)))"
  },
  "testNegation": {
    "snippet": "!true",
    "result": "NegationNode(BoolNode(true))"
  },
  "testStringEscaping": {
    "snippet": "'asdadsasd\\'asdasd'",
    "result": "StringNode(asdadsasd'asdasd)"
  },
  "testTypeConversionToNumber": {
    "snippet": "5 + '10.34' + true",
    "result": "BinaryOpNode(Plus, lhs: BinaryOpNode(Plus, lhs: NumberNode(5.0), rhs: StringNode(10.34)), rhs: BoolNode(true))"
  },
  "testTypeConversionToBool": {
    "snippet": "0 ? -1 : 1 ? '' ? -1 : 'yes' : -1",
    "result": "ConditionNode(condition: NumberNode(0.0), trueExp: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(1.0)), falseExp: ConditionNode(condition: NumberNode(1.0), trueExp: ConditionNode(condition: StringNode(), trueExp: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(1.0)), falseExp: StringNode(yes)), falseExp: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(1.0))))"
  },
  "testSelfUsageInSubExpression": {
    "snippet": ".relation[. = me].firstName",
    "result": "LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(relation, type:propertyOrItem, list:list), LookupNode([BinaryOpNode(ConditionEquals, lhs: LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single)]), rhs: LookupNode([VariableNode(me, type:propertyOrItem, list:single)]))]), VariableNode(firstName, type:propertyOrItem, list:single)])"
  },
  "testLookupItems": {
    "snippet": ".sibling[]",
    "result": "LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(sibling, type:propertyOrItem, list:list)])"
  },
  "testLookupReverseEdgeItems": {
    "snippet": ".~sibling",
    "result": "LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(sibling, type:reverseEdgeItem, list:single)])"
  },
  "testLookupEdges": {
    "snippet": "._sibling",
    "result": "LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(sibling, type:edge, list:single)])"
  },
  "testLookupReverseEdges": {
    "snippet": "._~sibling[]",
    "result": "LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(sibling, type:reverseEdge, list:list)])"
  },
  "testStringModeStartWithString": {
    "snippet": "Hello {fetchName()}!",
    "startMode": "string",
    "result": "StringModeNode(expressions: [StringNode(Hello ), CallNode(lookup: LookupNode([VariableNode(fetchName, type:propertyOrItem, list:single)]), argument: []), StringNode(!)])"
  },
  "testStringModeMultipleBlocks": {
    "snippet": "Hello {.firstName} {.lastName}",
    "startMode": "string",
    "result": "StringModeNode(expressions: [StringNode(Hello ), LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(firstName, type:propertyOrItem, list:single)]), StringNode( ), LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(lastName, type:propertyOrItem, list:single)])])"
  },
  "testStringModeUsingOr": {
    "snippet": "{.title or \"test\"} — {.content.plainString}",
    "startMode": "string",
    "result": "StringModeNode(expressions: [BinaryOpNode(ConditionOR, lhs: LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(title, type:propertyOrItem, list:single)]), rhs: StringNode(test)), StringNode( — ), LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(content, type:propertyOrItem, list:single), VariableNode(plainString, type:propertyOrItem, list:single)])])"
  },
  "testStringModeStartWithExpression": {
    "snippet": "{fetchName()} Hello",
    "startMode": "string",
    "result": "StringModeNode(expressions: [CallNode(lookup: LookupNode([VariableNode(fetchName, type:propertyOrItem, list:single)]), argument: []), StringNode( Hello)])"
  },
  "testStringModeWithQuote": {
    "snippet": "Photo AND ANY includes.uid = {.uid}",
    "startMode": "string",
    "result": "StringModeNode(expressions: [StringNode(Photo AND ANY includes.uid = ), LookupNode([VariableNode(@@DEFAULT@@, type:propertyOrItem, list:single), VariableNode(uid, type:propertyOrItem, list:single)])])"
  },
  "testExample": {
    "snippet": "!(test + -5.63537) or 4/3 ? variable.func() : me.address[primary = true].country ? ((4+5 * 10) + test[10]) : 'asdads\\'asdad' + ''",
    "result": "ConditionNode(condition: BinaryOpNode(ConditionOR, lhs: NegationNode(BinaryOpNode(Plus, lhs: LookupNode([VariableNode(test, type:propertyOrItem, list:single)]), rhs: BinaryOpNode(Multiplication, lhs: NumberNode(-1.0), rhs: NumberNode(5.63537)))), rhs: BinaryOpNode(Division, lhs: NumberNode(4.0), rhs: NumberNode(3.0))), trueExp: CallNode(lookup: LookupNode([VariableNode(variable, type:propertyOrItem, list:single), VariableNode(func, type:propertyOrItem, list:single)]), argument: []), falseExp: ConditionNode(condition: LookupNode([VariableNode(me, type:propertyOrItem, list:single), VariableNode(address, type:propertyOrItem, list:list), LookupNode([BinaryOpNode(ConditionEquals, lhs: LookupNode([VariableNode(primary, type:propertyOrItem, list:single)]), rhs: BoolNode(true))]), VariableNode(country, type:propertyOrItem, list:single)]), trueExp: BinaryOpNode(Plus, lhs: BinaryOpNode(Plus, lhs: NumberNode(4.0), rhs: BinaryOpNode(Multiplication, lhs: NumberNode(5.0), rhs: NumberNode(10.0))), rhs: LookupNode([VariableNode(test, type:propertyOrItem, list:list), LookupNode([NumberNode(10.0)])])), falseExp: BinaryOpNode(Plus, lhs: StringNode(asdads'asdad), rhs: StringNode())))"
  },
  "testErrorIncompleteCondition": {
    "snippet": "true ? 'yes'",
    "error": "ExpectedConditionElse"
  },
  "testErrorIncompleteBinaryOp": {
    "snippet": "5 +",
    "error": "ExpectedExpression(EOF)"
  },
  "testErrorUnsupportedBinaryOp": {
    "snippet": "5 @ 4",
    "error": "UnexpectedToken(Identifier, @, 3)"
  },
  "testErrorMissingParenClose": {
    "snippet": "(5 + 10",
    "error": "ExpectedCharacter())"
  },
  "testErrorMissingCallParenClose": {
    "snippet": "foo(",
    "error": "ExpectedExpression(EOF)"
  },
  "testErrorMissingBracketClose": {
    "snippet": "test[10",
    "error": "ExpectedCharacter(])"
  },
  "testErrorMissingQuoteClose": {
    "snippet": "'asdads",
    "error": "MissingQuoteClose"
  },
  "testErrorUsingCurlyBracesNotInStringMode": {
    "snippet": "Hello {fetchName()}",
    "error": "UnexpectedToken(CurlyBracketOpen, 6)"
  },
  "testErrorUsingCurlyBracesInWrongContext": {
    "snippet": "Hello {'{fetchName()}'}",
    "startMode": "string",
    "error": "ExpectedExpression(CurlyBracketClose, 22)"
  }
}