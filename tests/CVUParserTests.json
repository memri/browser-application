{
  "testColorDefinition": {
    "snippet": "[color = background] {\n    dark: #ff0000\n    light: #330000\n}",
    "result": "[color = background] {\n    dark: #ff0000\n    light: #330000\n}"
  },
  "testStyleDefinition": {
    "snippet": "[style = my-label-text] {\n    color: highlight\n    border: background 1\n}",
    "result": "[style = my-label-text] {\n    border: \"background\" 1\n    color: \"highlight\"\n}"
  },
  "testRendererDefinition": {
    "snippet": "[renderer = generalEditor] {\n    sequence: labels starred other dates\n}",
    "result": "[renderer = generalEditor] {\n    sequence: \"labels\" \"starred\" \"other\" \"dates\"\n}"
  },
  "testLanguageDefinition": {
    "snippet": "[language = Dutch] {\n    addtolist: \"Voeg toe aan lijst...\"\n    sharewith: \"Deel met...\"\n}"
  },
  "testNamedViewDefinition": {
    "snippet": ".defaultButtonsForDataItem {\n    editActionButton: toggleEditMode\n}"
  },
  "testTypeViewDefinition": {
    "snippet": "Person {\n    title: \"{.firstName}\"\n}"
  },
  "testListViewDefinition": {
    "snippet": "Person[] {\n    title: \"All People\"\n}"
  },
  "testMultipleDefinitions": {
    "snippet": "[color = background] {\n    dark: #ff0000\n    light: #330000\n}\n\n[style = my-label-text] {\n    border: background 1\n    color: highlight\n}",
    "result": "[color = background] {\n    dark: #ff0000\n    light: #330000\n}\n\n[style = my-label-text] {\n    border: \"background\" 1\n    color: \"highlight\"\n}"
  },
  "testNestedObjects": {
    "snippet": "Person {\n    group {\n        key: value\n    }\n}",
    "result": "Person {\n    \n    group: {\n        key: \"value\"\n    }\n}"
  },
  "testNestedObjectsUsingColon": {
    "snippet": "Person: {\n    group: {\n        key: value\n    }\n}",
    "result": "Person {\n    \n    group: {\n        key: \"value\"\n    }\n}"
  },
  "testNestedObjectsWithKeysBefore": {
    "snippet": "Person {\n    key: 10\n    group {\n        key: value\n    }\n}",
    "result": "Person {\n    key: 10\n    \n    group: {\n        key: \"value\"\n    }\n}"
  },
  "testEscapedStringProperty": {
    "snippet": "[language = Dutch] {\n    sharewith: \"Deel \\\"met...\"\n}"
  },
  "testMixedQuoteTypeProperty": {
    "snippet": "[language = Dutch] {\n    addtolist: \"Voeg 'toe' aan lijst...\"\n}"
  },
  "testArrayStringProperty": {
    "snippet": "Person {\n    sequence: labels starred other dates\n}",
    "result": "Person {\n    sequence: \"labels\" \"starred\" \"other\" \"dates\"\n}"
  },
  "testArrayMixedProperty": {
    "snippet": "Person {\n    sequence: labels 5 \"other\" test\n}",
    "result": "Person {\n    sequence: \"labels\" 5 \"other\" \"test\"\n}"
  },
  "testArrayMultilineProperty": {
    "snippet": "Person {\n    sequence: [\n        openViewByName { title: \"{$sharewith}\" }\n        toggleEditMode { title: \"{$addtolist}\" }\n        duplicate { title: \"{$duplicate} {type}\" }\n    ]\n\n    key: value\n}",
    "result": "Person {\n    key: \"value\"\n    sequence: [\n        openViewByName {\n            title: \"{$sharewith}\"\n        }\n        toggleEditMode {\n            title: \"{$addtolist}\"\n        }\n        duplicate {\n            title: \"{$duplicate} {type}\"\n        }\n    ]\n}"
  },
  "testNestedRendererDefinition": {
    "snippet": "Person {\n    [renderer = timeline] {\n        timeProperty: dateCreated\n    }\n}",
    "result": "Person {\n    [renderer = timeline] {\n        timeProperty: \"dateCreated\"\n    }\n}"
  },
  "testNestedRendererDefinitionAfterProperty": {
    "snippet": "Person {\n    key: 10\n    [renderer = timeline] {\n        timeProperty: dateCreated\n    }\n}",
    "result": "Person {\n    key: 10\n\n    [renderer = timeline] {\n        timeProperty: \"dateCreated\"\n    }\n}"
  },
  "testStringExpressionProperty": {
    "snippet": "Person {\n    title: \"{.firstName}\"\n}"
  },
  "testExpressionProperty": {
    "snippet": "Person {\n    title: {{.firstName}}\n}"
  },
  "testStringProperty": {
    "snippet": "Person { title: \"hello\" }",
    "result": "Person {\n    title: \"hello\"\n}"
  },
  "testMultilineStringProperty": {
    "snippet": "Person { title: \"hello\n                 world!\" }",
    "result": "Person {\n    title: \"hello\n                 world!\"\n}"
  },
  "testNumberProperty": {
    "snippet": "Person { title: -5.34 }",
    "result": "Person {\n    title: -5.34\n}"
  },
  "testBoolProperty": {
    "snippet": "Person { title: true }",
    "result": "Person {\n    title: true\n}"
  },
  "testNilProperty": {
    "snippet": "Person { title: nil }",
    "result": "Person {\n    title: null\n}"
  },
  "testIdentifierProperty": {
    "snippet": "Person { defaultRenderer: thumbnail.grid }",
    "result": "Person {\n    defaultRenderer: \"thumbnail.grid\"\n}"
  },
  "testColorProperty": {
    "snippet": "Person { color: #f0f }",
    "result": "Person {\n    color: #ff00ff\n}"
  },
  "testJSONCompatibility": {
    "snippet": "\"Person\": {\n    \"string\": \"test\",\n    \"array\": [\"10\", 5],\n    \"object\": { \"test\": 10 },\n    \"bool\": false,\n    \"number\": 10,\n}",
    "result": "Person {\n    array: \"10\" 5\n    bool: false\n    number: 10\n    string: \"test\"\n    \n    object: {\n        test: 10\n    }\n}"
  },
  "testSingleLineJSONSyntax": {
    "snippet": "\"Person\": { \"string\": \"test\", \"array\": [\"10\", 5], \"object\": { \"test\": 10 }, \"bool\": false, \"number\": 10, }",
    "result": "Person {\n    array: \"10\" 5\n    bool: false\n    number: 10\n    string: \"test\"\n    \n    object: {\n        test: 10\n    }\n}"
  },
  "testCSSLikeSyntax": {
    "snippet": "Person {\n    background: #fff;\n    border: 1 red;\n    padding: 1 2 3 4;\n}",
    "result": "Person {\n    background: #ffffff\n    border: 1 \"red\"\n    padding: 1 2 3 4\n}"
  },
  "testSingleLineCSSLikeSyntax": {
    "snippet": "Person { background: #fff; border: 1 red; padding: 1 2 3 4; }",
    "result": "Person {\n    background: #ffffff\n    border: 1 \"red\"\n    padding: 1 2 3 4\n}"
  },
  "testSingleLineSyntax": {
    "snippet": "Person { background: #fff, border: 1 red, padding: 1 2 3 4, object: { test: 1 } }",
    "result": "Person {\n    background: #ffffff\n    border: 1 \"red\"\n    padding: 1 2 3 4\n    \n    object: {\n        test: 1\n    }\n}"
  },
  "testCurlyBracketsOnSeparateLine": {
    "snippet": "Person\n{\n    background: #fff\n    object:\n        { test: 1 }\n    bla:\n    {\n        test: 1\n    }\n}",
    "result": "Person {\n    background: #ffffff\n    \n    bla: {\n        test: 1\n    }\n    \n    object: {\n        test: 1\n    }\n}"
  },
  "testComments": {
    "snippet": "/* Hello */\nPerson {\n    /* World */\n    key: value\n}",
    "result": "Person {\n    key: \"value\"\n}"
  },
  "testUIElementProperties": {
    "snippet": "Person {\n    VStack {\n        font: 14\n        alignment: left\n\n        Text {\n            textAlign: center\n            align: top\n            font: 12 light\n        }\n\n        Text {\n            maxHeight: 500\n            border: #ff0000 1\n            cornerRadius: 10\n        }\n    }\n}"
  },
  "testUserState": {
    "snippet": "Person {\n    userState: {\n        showStarred: true\n    }\n}"
  },
  "testViewArguments": {
    "snippet": "Person {\n    viewArguments: {\n        readOnly: true\n    }\n}"
  },
  "testUIElementWithoutProperties": {
    "snippet": "Person {\n    VStack {\n        alignment: left\n        Text { font: 12 light }\n        Spacer\n        Text { maxheight: 500 }\n    }\n}",
    "result": "Person {\n    VStack {\n        alignment: left\n\n        Text {\n            font: 12 light\n        }\n\n        Spacer\n\n\n        Text {\n            maxheight: 500\n        }\n    }\n}"
  },
  "testNestedViews": {
    "snippet": "Person {\n    [renderer = generalEditor] {\n\n        picturesOfPerson: {\n            sectionTitle: \"Photos of {.computedTitle()}\"\n            foreach: false\n\n            SubView {\n                view: {\n                    defaultRenderer: \"thumbnail.grid\"\n\n                    [datasource = pod] {\n                        query: \"Photo AND ANY includes.memriID = '{.memriID}'\"\n                    }\n\n                    [renderer = thumbnail.grid] {\n                        columns: 5\n                        itemInset: 0\n                    }\n                }\n            }\n        }\n    }\n}"
  },
  "testActionStar": {
    "snippet": "Person {\n    [renderer = list] {\n        Action {\n            press: star\n        }\n    }\n}"
  },
  "testActionAddItem": {
    "snippet": "Person {\n    [renderer = list] {\n        press: addItem {\n            arguments: {\n                template: {\n                    type: \"ImporterInstance\"\n                    name: {{.name}}\n                }\n            }\n        }\n    }\n}"
  },
  "testMultipleActions": {
    "snippet": "Person {\n    [renderer = list] {\n        press: [\n            link {\n                arguments: {\n                    property: {{property}}\n                    dataItem: {{dataItem}}\n                }\n            }\n            closePopup\n        ]\n    }\n}"
  },
  "testErrorMissingCurlBracketClose": {
    "snippet": "Person {\n    test: 1",
    "error": "UnexpectedToken(EOF,1,12)"
  },
  "testErrorMissingBracketCloseInDefinition": {
    "snippet": "[color = \"test\" {\n    test: 1\n}",
    "error": "ExpectedCharacter(']')"
  },
  "testErrorMissingExprCloseBracket": {
    "snippet": "Person {\n    expr: {{.test}\n}",
    "error": "MissingExpressionClose(EOF,1,21)"
  },
  "testErrorMissingExprCloseBrackets": {
    "snippet": "Person {\n    expr: {{.test\n}",
    "error": "MissingExpressionClose(EOF,1,20)"
  },
  "testErrorExtraBracket": {
    "snippet": "Person {\n    expr: [adasd, 5[]\n}",
    "error": "ExpectedIdentifier(BracketClose,1,21)"
  },
  "testErrorTopLevelBracket": {
    "snippet": "[5,3,4,]",
    "error": "ExpectedIdentifier(Number,5,2)"
  },
  "testErrorExtraCurlyBracket": {
    "snippet": "Person {\n    expr: [adasd, 5{]\n}",
    "error": "UnexpectedToken(BracketClose,1,21)"
  },
  "testErrorExtraColonInArray": {
    "snippet": "Person {\n    expr: [\"asdads\": asdasd]\n}",
    "error": "ExpectedKey(Colon,1,20)"
  },
  "testErrorExtraColonInProperty": {
    "snippet": "Person {\n    expr: asdads: asdasd\n}",
    "error": "ExpectedKey(Colon,1,17)"
  },
  "testErrorMissingQuoteClose": {
    "snippet": "Person {\n    string: \"value\n}",
    "error": "MissingQuoteClose(EOF,1,21)"
  }
}