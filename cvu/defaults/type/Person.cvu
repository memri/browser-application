[session = all-people] {
    [view] {
        title: "All People"
        [datasource = pod] {
            query: "Person"
        }
    }
}

[language = "English"] {
    sharewith: "Share with..."
    addtolist: "Add to list..."
    duplicate: "Duplicate"
    showtimeline: "Show Timeline"
    timelineof: "Timeline of this"
    starred: "Starred"
    all: "All"
}
[language = "Dutch"] {
    sharewith: "Deel met..."
    addtolist: "Voeg toe aan lijst..."
    duplicate: "Dupliceer"
    showtimeline: "Toon Tijdslijn"
    timelineof: "Tijdslijn van deze"
    starred: "Favoriete"
    all: "Alle"
}
 
.defaultButtonsForItem {
    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "{$showtimeline}"
            
            view: {
                defaultRenderer: timeline
                
                [datasource = pod] {
                    query: "AuditItem appliesTo:{.id}"
                    sortProperty: dateCreated
                    sortAscending: true
                }
                
                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
    ]
    
    contextPane {
        buttons: star schedule
        
        actions: [
            showOverlay { title: "{$sharewith}" }
            addToPanel { title: "{$addtolist}" }
            duplicate { title: "{$duplicate} {type}" }
        ]
        
        navigate: [
            openView {
                title: "{$timelineof} {type.lowercased()}"
                view: {
                    defaultRenderer: timeline
                    
                     [datasource = pod] {
                        query: "AuditItem appliesTo:{.id}"
                        sortProperty: dateCreated
                        sortAscending: true
                    }
                    
                    [renderer = timeline] {
                        timeProperty: dateCreated
                    }
                }
            }
            openViewByName {
                title: "{$starred} {type.plural()}"
                viewName: "filter-starred"
                viewArguments: {
                    include: "all-{type}"
                }
            }
            openViewByName {
                title: "{$all} {type.lowercased().plural()}"
                viewName: "all-{type}"
            }
        ]
    }
}

Person {
    title: "{.firstName} {.lastName}"
    defaultRenderer: generalEditor
    
    /*include:
        "defaultButtonsForItem" { type: Person }*/
    
    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "{$showtimeline}"
            
            view: {
                defaultRenderer: timeline
                
                [datasource = pod] {
                    query: "AuditItem appliesTo:{.id}"
                    sortProperty: dateCreated
                    sortAscending: true
                }
                
                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
    ]
    
    contextPane {
        buttons: star schedule
        
        action: [
            showOverlay { title: "{$sharewith}" }
            addToPanel { title: "{$addtolist}" }
            duplicate { title: "{$duplicate} person" }
        ]
        
        navigate: [
            openView {
                title: "{$timelineof} person"
                view: {
                    defaultRenderer: timeline
                    
                     [datasource = pod] {
                        query: "AuditItem appliesTo:{.id}"
                        sortProperty: dateCreated
                        sortAscending: true
                    }
                    
                    [renderer = timeline] {
                        timeProperty: dateCreated
                    }
                }
            }
            openViewByName {
                title: "{$starred} persons"
                viewName: "filter-starred"
                viewArguments: {
                    include: "all-person"
                }
            }
            openSessionByName {
                title: "{$all} persons"
                sessionName: "all-person"
            }
        ]
    }
    
    /* end include */
    
    [renderer = generalEditor] {
        layout: [
            { section: profilePicture }
            { section: labels }
            { section: names, fields: firstName lastName }
            { section: picturesOfPerson }
            { section: phoneNumbers, edges: hasPhoneNumber, type: PhoneNumber }
/*            { section: family, edges: family, show: {{ .family[] }} }*/
/*            { section: relationships, edges: non-family }*/
            { section: relationships, edges: relationship, type: Person }
            { section: addresses, edges: address, type: Address }
            { section: websites, edges: website, type: Website }
            { section: companies, edges: company, type: Company }
            { section: diets, edges: diet, type: Diet }
            { section: medicalConditions, edges: medicalCondition, type: MedicalCondition }
            { section: publicKeys, edges: publicKey, type: PublicKey }
            { section: onlineProfiles, edges: onlineProfile, type: OnlineProfile }
            { section: other, fields: * }
            { section: dates }
        ]

        profilePicture {
            showTitle: false
        
            ZStack {
                alignment: center
            
                Image {
                    image: {{.profilePicture}}
                    border: #ccc 1
                    resizable: fill
                    minHeight: 250
                    maxHeight: 250
                    opacity: 0.6
                    align: center
                }
                
                ZStack {
                    border: #fff 27
                    padding: 12
                    maxWidth: 140
                    maxHeight: 140
                    cornerRadius: 100
                    align: center
                
                    Image {
                        image: {{.profilePicture}}
                        resizable: fill
                    }
                    
                    HStack {
                        align: center
                        maxWidth: 140
                        maxHeight: 140
                        show: {{!readOnly}}
                    
                        Action {
                            cornerRadius: 25
                            maxWidth: 50
                            maxHeight: 50
                            background: #eee
                            color: #434343
                            align: center
                            font: 14 regular
                            
                            press: openViewByName {
                                renderAs: popup
                                title: "Edit"
                                
                                viewName: "choose-item-by-query"
                                viewArguments: {
                                    query: "Photo" /* AND ANY allEdges.targetItemID = {.uid} */
                                    type: Photo
                                    renderer: "thumbnail"
                                    subject: {{.}}
                                    edgeType: "profilePicture"
                                    distinct: true
                                    title: "Choose a photo"
                                }
                            }
                        }
                    }
                }
            }
        }
        
        picturesOfPerson {
            title: "Photos of {.computedTitle()}"
        
            SubView {
                minHeight: 165
                
                view {
                    defaultRenderer: thumbnail.horizontalgrid
                    
                    [datasource = pod] {
                        query: "Photo AND ANY allEdges.targetItemID = {.uid}"
                    }
                    
                    [renderer = thumbnail.horizontalgrid] {
                        columns: 2
                        edgeInset: 0
                        allowBounce: false
                    }
                }
                arguments: {
                    showToolbar: false
                    showSearchbar: false
                    readOnly: true
                }
            }
        }
        
        labels {
            showTitle: false
            dividers: false
        
            VStack {
                padding: 10 36 5 36
            
                Text {
                    show: {{ !.label }}
                    text: "no labels yet"
                }
                
                FlowStack {
                    list: {{ .label[] }}
                
                    button {
                        press: openViewByName {
                            viewName: "all-items-with-label"
                            viewArguments: {
                                name: "{.name}"
                                uid: {{.uid}}
                            }
                        }
                    
                        VStack {
                            background: {{.color}}
                            cornerRadius: 5
                        
                            Text {
                                text: "{.name}"
                                font: 16 semibold
                                color: #fff
                                padding: 5 8 5 8
                            }
                        }
                    }
                }
            }
        }
        
        publicKeys {
            EditorRow {
                title: "{.name}"
            
                Text {
                    text: "{.key}"
                }
            }
        }
        
        onlineProfiles {
            EditorRow {
                title: "{.type}"
            
                VStack {
                    cornerRadius: 5
                
                    Text {
                        text: "{.handle}"
                    }
                }
            }
        }
    }
}

Person[] {
    title: "All People"
    defaultRenderer: thumbnail
    emptyResultText: "There are no people here yet"
    
    [datasource = pod] {
        query: "Person"
        sortProperty: dateModified
    }
    
    actionButton:
        addItem {
            template: {
                _type: Person
            }
        }
    
    editActionButton: toggleEditMode
    filterButtons: showStarred toggleFilterPanel
    
    [renderer = list] {
        VStack {
            alignment: left
            padding: 5 0 0 20
        
            HStack {
                alignment: center
                
                ZStack {
                    padding: 12
                    maxWidth: 25
                    maxHeight: 25
                    cornerRadius: 30
                    align: center
                    margin: 5 15 9 0
                
                    Image {
                        image: {{.profilePicture}}
                        resizable: fill
                        minHeight: 60
                        maxHeight: 60
                    }
                }
            
                VStack {
                    Text {
                        text: "{.firstName} {.lastName}"
                        font: 18 semibold
                        color: #333
                        padding: 0 0 3 0
                    }
                    Text {
                        text: "{.relation[.firstName = 'Alice'].lastName}"
                        font: 14 regular
                        color: #888
                        padding: 0 0 5 0
                    }
                }
            }
        }
        
    }
    
    [renderer = thumbnail] {
        spacing: 10
        edgeInset: 10
        
        VStack {
            alignment: center
            
            Image {
                image: {{.profilePicture}}
                cornerRadius: 10
                resizable: fit
            }
            Text {
                text: "{.firstName} {.lastName}"
                font: 12 semibold
                textAlign: center
                color: #333
                padding: 3 0 0 0
            }
        }
    }
    
    [renderer = map] {
		address: {{.address[]}}
		label: "{.firstName}"
        
/*        Popup {*/
            VStack {
                Image {
                    image: {{.profilePicture}}
                }
                Text {
                    text: "{.firstName} {.lastName}"
                }
            }
/*        }*/
    }
    
    [renderer = chart] {
        chartTitle: "People by height" /* Use this to override the auto-generated chart title */
        
        label: "{.firstName}" /* used for bar chart (also provides label on line chart) */
		yAxis: {{.height}}
        
        hideGridlines: true
        yAxisStartAtZero: true /* use this to force y-Axis to start at zero (vs fitting data)*/
        
        sortProperty: height
        sortAscending: true
    }
    
    [renderer = chart.line] {
        chartTitle: "Height vs. Age"
        chartSubtitle: "A demo of dynamically graphing your data."
        
		xAxis: {{.age()}} /* Feeling old? Try {{.age() - 10}} to give everyone back a decade ;) */
		yAxis: {{.height}}
        label: "{.firstName}" /* The label to show over the point */
        
        /* line chart ignores sort (automatically sorted by x-axis) */
    }
}
