//
//  WARNING: THIS FILE IS AUTOGENERATED; DO NOT CHANGE.
//  Visit https://gitlab.memri.io/memri/schema to learn more.
//
//  schema.ts
//
//  Copyright Â© 2020 memri. All rights reserved.
//

import {decodeEdges, jsonErrorHandling} from "../gui/util";
import {Color} from "../parsers/cvu-parser/CVUParser";
import {Item} from "./items/Item";
//import {RealmObjects} from "./RealmLocal";
//import {Person} from "./items/Other";

// The family of all data item classes
export enum ItemFamily {
    typeAuditItem = "AuditItem",
    typeCompany = "Company",
    typeCreativeWork = "CreativeWork",
    typeDigitalDocument = "DigitalDocument",
    typeComment = "Comment",
    typeNote = "Note",
    typeMediaObject = "MediaObject",
    typeAudio = "Audio",
    typePhoto = "Photo",
    typeVideo = "Video",
    typeCVUStoredDefinition = "CVUStoredDefinition",
    typeDatasource = "Datasource",
    typeDevice = "Device",
    typeDiet = "Diet",
    typeDownloader = "Downloader",
    typeEdge = "Edge",
    typeFile = "File",
    typeImporter = "Importer",
    typeImporterRun = "ImporterRun",
    typeIndexer = "Indexer",
    typeIndexerRun = "IndexerRun",
    typeLabel = "Label",
    typeLocation = "Location",
    typeAddress = "Address",
    typeCountry = "Country",
    typeMedicalCondition = "MedicalCondition",
    typeNavigationItem = "NavigationItem",
    typeOnlineProfile = "OnlineProfile",
    typePerson = "Person",
    typePhoneNumber = "PhoneNumber",
    typePublicKey = "PublicKey",
    typeSession = "Session",
    typeSessions = "Sessions",
    typeSessionView = "SessionView",
    typeSetting = "Setting",
    typeSyncState = "SyncState",
    typeUserState = "UserState",
    typeViewArguments = "ViewArguments",
    typeWebsite = "Website",
}

//export var discriminator = Discriminator._type //TODO:

export var backgroundColor = function(name) {
    switch (name) {
        case ItemFamily.typeAuditItem: return new Color("#93c47d")
        case ItemFamily.typeCompany: return new Color("#93c47d")
        case ItemFamily.typeCreativeWork: return new Color("#93c47d")
        case ItemFamily.typeDigitalDocument: return new Color("#93c47d")
        case ItemFamily.typeComment: return new Color("#93c47d")
        case ItemFamily.typeNote: return new Color("#93c47d")
        case ItemFamily.typeMediaObject: return new Color("#93c47d")
        case ItemFamily.typeAudio: return new Color("#93c47d")
        case ItemFamily.typePhoto: return new Color("#93c47d")
        case ItemFamily.typeVideo: return new Color("#93c47d")
        case ItemFamily.typeCVUStoredDefinition: return new Color("#93c47d")
        case ItemFamily.typeDatasource: return new Color("#93c47d")
        case ItemFamily.typeDevice: return new Color("#93c47d")
        case ItemFamily.typeDiet: return new Color("#37af1c")
        case ItemFamily.typeDownloader: return new Color("#93c47d")
        case ItemFamily.typeEdge: return new Color("#93c47d")
        case ItemFamily.typeFile: return new Color("#93c47d")
        case ItemFamily.typeImporter: return new Color("#93c47d")
        case ItemFamily.typeImporterRun: return new Color("#93c47d")
        case ItemFamily.typeIndexer: return new Color("#93c47d")
        case ItemFamily.typeIndexerRun: return new Color("#93c47d")
        case ItemFamily.typeLabel: return new Color("#93c47d")
        case ItemFamily.typeLocation: return new Color("#93c47d")
        case ItemFamily.typeAddress: return new Color("#93c47d")
        case ItemFamily.typeCountry: return new Color("#93c47d")
        case ItemFamily.typeMedicalCondition: return new Color("#3dc8e2")
        case ItemFamily.typeNavigationItem: return new Color("#93c47d")
        case ItemFamily.typeOnlineProfile: return new Color("#93c47d")
        case ItemFamily.typePerson: return new Color("#3a5eb2")
        case ItemFamily.typePhoneNumber: return new Color("#eccf23")
        case ItemFamily.typePublicKey: return new Color("#93c47d")
        case ItemFamily.typeSession: return new Color("#93c47d")
        case ItemFamily.typeSessions: return new Color("#93c47d")
        case ItemFamily.typeSessionView: return new Color("#93c47d")
        case ItemFamily.typeSetting: return new Color("#93c47d")
        case ItemFamily.typeSyncState: return new Color("#93c47d")
        case ItemFamily.typeUserState: return new Color("#93c47d")
        case ItemFamily.typeViewArguments: return new Color("#93c47d")
        case ItemFamily.typeWebsite: return new Color("#3d57e2")
    }
}

export var foregroundColor = function(name) {
    switch (name) {
        case ItemFamily.typeAuditItem: return new Color("#ffffff")
        case ItemFamily.typeCompany: return new Color("#ffffff")
        case ItemFamily.typeCreativeWork: return new Color("#ffffff")
        case ItemFamily.typeDigitalDocument: return new Color("#ffffff")
        case ItemFamily.typeComment: return new Color("#ffffff")
        case ItemFamily.typeNote: return new Color("#ffffff")
        case ItemFamily.typeMediaObject: return new Color("#ffffff")
        case ItemFamily.typeAudio: return new Color("#ffffff")
        case ItemFamily.typePhoto: return new Color("#ffffff")
        case ItemFamily.typeVideo: return new Color("#ffffff")
        case ItemFamily.typeCVUStoredDefinition: return new Color("#ffffff")
        case ItemFamily.typeDatasource: return new Color("#ffffff")
        case ItemFamily.typeDevice: return new Color("#ffffff")
        case ItemFamily.typeDiet: return new Color("#ffffff")
        case ItemFamily.typeDownloader: return new Color("#ffffff")
        case ItemFamily.typeEdge: return new Color("#ffffff")
        case ItemFamily.typeFile: return new Color("#ffffff")
        case ItemFamily.typeImporter: return new Color("#ffffff")
        case ItemFamily.typeImporterRun: return new Color("#ffffff")
        case ItemFamily.typeIndexer: return new Color("#ffffff")
        case ItemFamily.typeIndexerRun: return new Color("#ffffff")
        case ItemFamily.typeLabel: return new Color("#ffffff")
        case ItemFamily.typeLocation: return new Color("#ffffff")
        case ItemFamily.typeAddress: return new Color("#ffffff")
        case ItemFamily.typeCountry: return new Color("#ffffff")
        case ItemFamily.typeMedicalCondition: return new Color("#ffffff")
        case ItemFamily.typeNavigationItem: return new Color("#ffffff")
        case ItemFamily.typeOnlineProfile: return new Color("#ffffff")
        case ItemFamily.typePerson: return new Color("#ffffff")
        case ItemFamily.typePhoneNumber: return new Color("#ffffff")
        case ItemFamily.typePublicKey: return new Color("#ffffff")
        case ItemFamily.typeSession: return new Color("#ffffff")
        case ItemFamily.typeSessions: return new Color("#ffffff")
        case ItemFamily.typeSessionView: return new Color("#ffffff")
        case ItemFamily.typeSetting: return new Color("#ffffff")
        case ItemFamily.typeSyncState: return new Color("#ffffff")
        case ItemFamily.typeUserState: return new Color("#ffffff")
        case ItemFamily.typeViewArguments: return new Color("#ffffff")
        case ItemFamily.typeWebsite: return new Color("#ffffff")
    }
}
/*
export var getPrimaryKey = function(name) {
    return new (getItemType(name))().primaryKey() ?? ""
}*/

export var getItemType = function(name) {
    switch (name) {
        case ItemFamily.typeAuditItem: return "AuditItem"
        case ItemFamily.typeCompany: return "Company"
        case ItemFamily.typeCreativeWork: return "CreativeWork"
        case ItemFamily.typeDigitalDocument: return "DigitalDocument"
        case ItemFamily.typeComment: return "Comment"
        case ItemFamily.typeNote: return "Note"
        case ItemFamily.typeMediaObject: return "MediaObject"
        case ItemFamily.typeAudio: return "Audio"
        case ItemFamily.typePhoto: return "Photo"
        case ItemFamily.typeVideo: return "Video"
        case ItemFamily.typeCVUStoredDefinition: return "CVUStoredDefinition"
        case ItemFamily.typeDatasource: return "Datasource"
        case ItemFamily.typeDevice: return "Device"
        case ItemFamily.typeDiet: return "Diet"
        case ItemFamily.typeDownloader: return "Downloader"
        case ItemFamily.typeEdge: return "Edge"
        case ItemFamily.typeFile: return "File"
        case ItemFamily.typeImporter: return "Importer"
        case ItemFamily.typeImporterRun: return "ImporterRun"
        case ItemFamily.typeIndexer: return "Indexer"
        case ItemFamily.typeIndexerRun: return "IndexerRun"
        case ItemFamily.typeLabel: return "Label"
        case ItemFamily.typeLocation: return "Location"
        case ItemFamily.typeAddress: return "Address"
        case ItemFamily.typeCountry: return "Country"
        case ItemFamily.typeMedicalCondition: return "MedicalCondition"
        case ItemFamily.typeNavigationItem: return "NavigationItem"
        case ItemFamily.typeOnlineProfile: return "OnlineProfile"
        case ItemFamily.typePerson: return "Person"
        case ItemFamily.typePhoneNumber: return "PhoneNumber"
        case ItemFamily.typePublicKey: return "PublicKey"
        case ItemFamily.typeSession: return "Session"
        case ItemFamily.typeSessions: return "Sessions"
        case ItemFamily.typeSessionView: return "SessionView"
        case ItemFamily.typeSetting: return "Setting"
        case ItemFamily.typeSyncState: return "SyncState"
        case ItemFamily.typeUserState: return "UserState"
        case ItemFamily.typeViewArguments: return "ViewArguments"
        case ItemFamily.typeWebsite: return "Website"
    }
}

/// TBD
export class AuditItem  {
    /// Date of death.
    date: Date
    /// TBD
    content
    /// TBD
    action

    /// TBD
    get appliesTo() {
        return this.edges("appliesTo")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.date = decoder.decodeIfPresent("date") ?? this.date
            this.content = decoder.decodeIfPresent("content") ?? this.content
            this.action = decoder.decodeIfPresent("action") ?? this.action

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A business corporation.
export class Company  {
    /// TBD
    type
    /// The name of the item.
    name

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// The most generic kind of creative work, including books, movies, photographs, software
/// programs, etc.
export class CreativeWork  {
    /// An abstract is a short description that summarizes a CreativeWork.
    abstract
    /// Date of first broadcast/publication.
    datePublished: Date
    /// Keywords or tags used to describe this content. Multiple entries in a keywords list are
    /// typically delimited by commas.
    keyword
    /// A license document that applies to this content, typically indicated by URL.
    license
    /// A text that belongs to this item.
    text

    /// A media object that encodes this CreativeWork. This property is a synonym for encoding.
    get associatedMedia() {
        return this.edges("associatedMedia")?.items(MediaObject)
    }

    /// An audio object.
    get audio() {
        return this.edges("audio")?.items(Audio)
    }

    /// A citation or reference to another creative work, such as another publication, web page,
    /// scholarly article, etc.
    get citation() {
        return this.edges("citation")?.items(CreativeWork)
    }

    /// The location depicted or described in the content. For example, the location in a
    /// photograph or painting.
    get contentLocation() {
        return this.edges("contentLocation")?.items(Location)
    }

    /// The location where the CreativeWork was created, which may not be the same as the
    /// location depicted in the CreativeWork.
    get locationCreated() {
        return this.edges("locationCreated")?.items(Location)
    }

    /// A video object.
    get video() {
        return this.edges("video")?.items(Video)
    }

    /// The author of this content or rating.
    get writtenBy() {
        return this.edges("writtenBy")?.items(Person)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.abstract = decoder.decodeIfPresent("abstract") ?? this.abstract
            this.datePublished = decoder.decodeIfPresent("datePublished") ?? this.datePublished
            this.keyword = decoder.decodeIfPresent("keyword") ?? this.keyword
            this.license = decoder.decodeIfPresent("license") ?? this.license
            this.text = decoder.decodeIfPresent("text") ?? this.text

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// An electronic file or document.
export class DigitalDocument  {
    constructor(decoder) {
        

        jsonErrorHandling(function () {

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A comment.
export class Comment  {
    /// TBD
    content
    /// TBD
    textContent

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.content = decoder.decodeIfPresent("content") ?? this.content
            this.textContent = decoder.decodeIfPresent("textContent") ?? this.textContent

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A file containing a note.
export class Note  {
    /// TBD
    title
    /// TBD
    content
    /// TBD
    textContent

    /// TBD
    get comment() {
        return this.edges("comment")?.items(Comment)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.title = decoder.decodeIfPresent("title") ?? this.title
            this.content = decoder.decodeIfPresent("content") ?? this.content
            this.textContent = decoder.decodeIfPresent("textContent") ?? this.textContent

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A media object, such as an image, video, or audio object embedded in a web page or a
/// downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects
/// associated with it on the same web page. For example, a page about a single song (MusicRecording)
/// may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
export class MediaObject  {
    /// The endTime of something. For a reserved event or service, the time that it is expected
    /// to end. For actions that span a period of time, when the action was performed. e.g. John wrote a
    /// book from January to December. For media, including audio and video, it's the time offset of the
    /// end of a clip within a larger file.
    endTime: Date
    /// Location of the actual bytes of the media object, for example the image file or video
    /// file.
    fileLocation
    /// Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.),
    /// KB will be assumed.
    fileSize
    /// The startTime of something. For a reserved event or service, the time that it is
    /// expected to start. For actions that span a period of time, when the action was performed. e.g.
    /// John wrote a book from January to December. For media, including audio and video, it's the time
    /// offset of the start of a clip within a larger file.
    startTime: Date
    /// The bitrate of the media object.
    bitrate
    /// TBD
    duration
    /// The height of the item.
    height
    /// The width of the item.
    width

    /// TBD
    get file() {
        return this.edge("file")?.target(File)
    }

    /// TBD
    get includes() {
        return this.edges("includes")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.endTime = decoder.decodeIfPresent("endTime") ?? this.endTime
            this.fileLocation = decoder.decodeIfPresent("fileLocation") ?? this.fileLocation
            this.fileSize = decoder.decodeIfPresent("fileSize") ?? this.fileSize
            this.startTime = decoder.decodeIfPresent("startTime") ?? this.startTime
            this.bitrate.value = decoder.decodeIfPresent("bitrate") ?? this.bitrate.value
            this.duration.value = decoder.decodeIfPresent("duration") ?? this.duration.value
            this.height.value = decoder.decodeIfPresent("height") ?? this.height.value
            this.width.value = decoder.decodeIfPresent("width") ?? this.width.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// An audio file.
export class Audio  {
    /// The caption for this object. For downloadable machine formats (closed caption, subtitles
    /// etc.) use MediaObject and indicate the encodingFormat.
    caption
    /// If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
    transcript
    /// The name of the item.
    name
    /// The bitrate of the media object.
    bitrate
    /// TBD
    duration

    /// TBD
    get file() {
        return this.edge("file")?.target(File)
    }

    /// TBD
    get includes() {
        return this.edges("includes")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.caption = decoder.decodeIfPresent("caption") ?? this.caption
            this.transcript = decoder.decodeIfPresent("transcript") ?? this.transcript
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.bitrate.value = decoder.decodeIfPresent("bitrate") ?? this.bitrate.value
            this.duration.value = decoder.decodeIfPresent("duration") ?? this.duration.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// An image file.
export class Photo  {
    /// The caption for this object. For downloadable machine formats (closed caption, subtitles
    /// etc.) use MediaObject and indicate the encodingFormat.
    caption
    /// Exif data for this object.
    exifData
    /// The name of the item.
    name
    /// The width of the item.
    width
    /// The height of the item.
    height

    /// Thumbnail image for an image or video.
    get thumbnail() {
        return this.edge("thumbnail")?.target(File)
    }

    /// TBD
    get file() {
        return this.edge("file")?.target(File)
    }

    /// TBD
    get includes() {
        return this.edges("includes")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.caption = decoder.decodeIfPresent("caption") ?? this.caption
            this.exifData = decoder.decodeIfPresent("exifData") ?? this.exifData
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.width.value = decoder.decodeIfPresent("width") ?? this.width.value
            this.height.value = decoder.decodeIfPresent("height") ?? this.height.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A video file.
export class Video  {
    /// The caption for this object. For downloadable machine formats (closed caption, subtitles
    /// etc.) use MediaObject and indicate the encodingFormat.
    caption
    /// Exif data for this object.
    exifData
    /// The name of the item.
    name
    /// The width of the item.
    width
    /// The height of the item.
    height
    /// TBD
    duration

    /// Thumbnail image for an image or video.
    get thumbnail() {
        return this.edges("thumbnail")?.items(File)
    }

    /// TBD
    get file() {
        return this.edge("file")?.target(File)
    }

    /// TBD
    get includes() {
        return this.edges("includes")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.caption = decoder.decodeIfPresent("caption") ?? this.caption
            this.exifData = decoder.decodeIfPresent("exifData") ?? this.exifData
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.width.value = decoder.decodeIfPresent("width") ?? this.width.value
            this.height.value = decoder.decodeIfPresent("height") ?? this.height.value
            this.duration.value = decoder.decodeIfPresent("duration") ?? this.duration.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class CVUStoredDefinition  {
    /// TBD
    definition
    /// TBD
    domain
    /// The name of the item.
    name
    /// TBD
    query
    /// TBD
    selector
    /// TBD
    type

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.definition = decoder.decodeIfPresent("definition") ?? this.definition
            this.domain = decoder.decodeIfPresent("domain") ?? this.domain
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.query = decoder.decodeIfPresent("query") ?? this.query
            this.selector = decoder.decodeIfPresent("selector") ?? this.selector
            this.type = decoder.decodeIfPresent("type") ?? this.type

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A business corporation.
export class Device  {
    /// TBD
    deviceID
    /// TBD
    make
    /// TBD
    manufacturer
    /// TBD
    model
    /// The name of the item.
    name
    /// TBD
    dateAquired: Date
    /// TBD
    dateLost: Date

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.deviceID = decoder.decodeIfPresent("deviceID") ?? this.deviceID
            this.make = decoder.decodeIfPresent("make") ?? this.make
            this.manufacturer = decoder.decodeIfPresent("manufacturer") ?? this.manufacturer
            this.model = decoder.decodeIfPresent("model") ?? this.model
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.dateAquired = decoder.decodeIfPresent("dateAquired") ?? this.dateAquired
            this.dateLost = decoder.decodeIfPresent("dateLost") ?? this.dateLost

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Diet  {
    /// TBD
    type
    /// TBD
    addition
    /// The name of the item.
    name

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.addition = decoder.decodeIfPresent("addition") ?? this.addition
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Downloader  {
    constructor(decoder) {
        

        jsonErrorHandling(function () {

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Edge {
    /// TBD
    type
    /// TBD
    targetItemType
    /// TBD
    sourceItemType
    /// Object describing syncing information about this object like loading state, versioning,
    /// etc.
    syncState
    /// Boolean whether the Item has been deleted.
    deleted: boolean = false
    /// The last version loaded from the server.
    version: number = 0
    /// TBD
    edgeLabel
    /// TBD
    targetItemID
    /// TBD
    sourceItemID
    /// TBD
    sequence

    constructor(decoder) {
        //

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.targetItemType = decoder.decodeIfPresent("itemType") ?? this.targetItemType
            this.syncState = decoder.decodeIfPresent("syncState") ?? this.syncState
            this.deleted = decoder.decodeIfPresent("deleted") ?? this.deleted
            this.version = decoder.decodeIfPresent("version") ?? this.version
            this.edgeLabel = decoder.decodeIfPresent("edgeLabel") ?? this.edgeLabel
            this.targetItemID.value = decoder.decodeIfPresent("uid") ?? this.targetItemID.value
            this.sequence.value = decoder.decodeIfPresent("sequence") ?? this.sequence.value

            this.parseTargetDict(decoder.decodeIfPresent("target"))
        }.bind(this))
    }
}

/// TBD
export class File  {
    /// The uri property represents the Uniform Resource Identifier (URI) of a resource.
    uri

    /// TBD
    get usedBy() {
        return this.edges("usedBy")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.uri = decoder.decodeIfPresent("uri") ?? this.uri

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Importer  {
    /// The name of the item.
    name
    /// TBD
    dataType
    /// TBD
    icon
    /// TBD
    bundleImage

    /// TBD
    get importerRun() {
        return this.edges("importerRun")?.items(ImporterRun)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.dataType = decoder.decodeIfPresent("dataType") ?? this.dataType
            this.icon = decoder.decodeIfPresent("icon") ?? this.icon
            this.bundleImage = decoder.decodeIfPresent("bundleImage") ?? this.bundleImage

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class ImporterRun  {
    /// The name of the item.
    name
    /// TBD
    dataType

    /// TBD
    get importer() {
        return this.edge("importer")?.target(Importer)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.dataType = decoder.decodeIfPresent("dataType") ?? this.dataType

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// An indexer enhances your personal data by inferring facts over existing data and adding those
/// to the database.
export class Indexer  {
    /// The name of the item.
    name
    /// TBD
    icon
    /// TBD
    query
    /// TBD
    bundleImage
    /// TBD
    runDestination

    /// TBD
    get indexerRun() {
        return this.edges("indexerRun")?.items(IndexerRun)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.icon = decoder.decodeIfPresent("icon") ?? this.icon
            this.query = decoder.decodeIfPresent("query") ?? this.query
            this.bundleImage = decoder.decodeIfPresent("bundleImage") ?? this.bundleImage
            this.runDestination = decoder.decodeIfPresent("runDestination") ?? this.runDestination

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A run of a certain Indexer.
export class IndexerRun  {
    /// The name of the item.
    name
    /// TBD
    query
    /// TBD
    progress

    /// TBD
    get indexer() {
        return this.edge("indexer")?.target(Indexer)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.query = decoder.decodeIfPresent("query") ?? this.query
            this.progress.value = decoder.decodeIfPresent("progress") ?? this.progress.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Label  {
    /// The color of this thing.
    color
    /// The name of the item.
    name

    /// TBD
    get comment() {
        return this.edges("comment")?.items(Comment)
    }

    /// TBD
    get appliesTo() {
        return this.edges("appliesTo")?.itemsArray()
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.color = decoder.decodeIfPresent("color") ?? this.color
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// The location of something.
export class Location  {
    /// TBD
    latitude
    /// TBD
    longitude

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.latitude.value = decoder.decodeIfPresent("latitude") ?? this.latitude.value
            this.longitude.value = decoder.decodeIfPresent("longitude") ?? this.longitude.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A postal address.
export class Address  {
    /// A city or town.
    city
    /// The postal code. For example, 94043.
    postalCode
    /// A state or province of a country.
    state
    /// The street address. For example, 1600 Amphitheatre Pkwy.
    street
    /// TBD
    type

    /// TBD
    get country() {
        return this.edge("country")?.target(Country)
    }

    /// The location of for example where the event is happening, an organization is located, or
    /// where an action takes place.
    get location() {
        return this.edge("location")?.target(Location)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.city = decoder.decodeIfPresent("city") ?? this.city
            this.postalCode = decoder.decodeIfPresent("postalCode") ?? this.postalCode
            this.state = decoder.decodeIfPresent("state") ?? this.state
            this.street = decoder.decodeIfPresent("street") ?? this.street
            this.type = decoder.decodeIfPresent("type") ?? this.type

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Country  {
    /// The name of the item.
    name

    /// TBD
    get flag() {
        return this.edge("flag")?.target(File)
    }

    /// The location of for example where the event is happening, an organization is located, or
    /// where an action takes place.
    get location() {
        return this.edge("location")?.target(Location)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class MedicalCondition  {
    /// TBD
    type
    /// The name of the item.
    name

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class NavigationItem  {
    /// TBD
    title
    /// TBD
    sessionName
    /// TBD
    type
    /// TBD
    sequence

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.title = decoder.decodeIfPresent("title") ?? this.title
            this.sessionName = decoder.decodeIfPresent("sessionName") ?? this.sessionName
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.sequence.value = decoder.decodeIfPresent("sequence") ?? this.sequence.value

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class OnlineProfile  {
    /// TBD
    type
    /// TBD
    handle

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.handle = decoder.decodeIfPresent("handle") ?? this.handle

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// A person (alive, dead, undead, or fictional).
export class SchemaPerson  {
    /// Date of birth.
    birthDate: Date
    /// Email address.
    email
    /// Date of death.
    deathDate: Date
    /// Family name. In the U.S., the last name of an Person. This can be used along with
    /// givenName instead of the name property.
    firstName
    /// Given name. In the U.S., the first name of a Person. This can be used along with
    /// familyName instead of the name property.
    lastName
    /// The sexual orientation of a person.
    gender
    /// The gender of a person.
    sexualOrientation
    /// The height of the item.
    height
    /// TBD
    shoulderWidth
    /// TBD
    armLength

    /// Physical address of the event or place.
    get address() {
        return this.edges("address")?.items(Address)
    }

    /// The place where the person was born.
    get birthPlace() {
        return this.edge("birthPlace")?.target(Location)
    }

    /// The place where the person died.
    get deathPlace() {
        return this.edge("deathPlace")?.target(Location)
    }

    /// TBD
    get profilePicture() {
        return this.edge("profilePicture")?.target(Photo)
    }

    /// A relation between two persons.
    get relationship() {
        return this.edges("relationship")?.items(Person)
    }

    /// A phone number.
    get hasPhoneNumber() {
        return this.edges("hasPhoneNumber")?.items(PhoneNumber)
    }

    /// TBD
    get website() {
        return this.edges("website")?.items(Website)
    }

    /// TBD
    get company() {
        return this.edges("company")?.items(Company)
    }

    /// TBD
    get publicKey() {
        return this.edges("publicKey")?.items(PublicKey)
    }

    /// TBD
    get onlineProfile() {
        return this.edges("onlineProfile")?.items(OnlineProfile)
    }

    /// TBD
    get diet() {
        return this.edges("diet")?.items(Diet)
    }

    /// TBD
    get medicalCondition() {
        return this.edges("medicalCondition")?.items(MedicalCondition)
    }

    constructor(decoder) {
        

        /*jsonErrorHandling(function () {
            this.birthDate = decoder.decodeIfPresent("birthDate") ?? this.birthDate
            this.email = decoder.decodeIfPresent("email") ?? this.email
            this.deathDate = decoder.decodeIfPresent("deathDate") ?? this.deathDate
            this.firstName = decoder.decodeIfPresent("firstName") ?? this.firstName
            this.lastName = decoder.decodeIfPresent("lastName") ?? this.lastName
            this.gender = decoder.decodeIfPresent("gender") ?? this.gender
            this.sexualOrientation = decoder.decodeIfPresent("sexualOrientation") ?? this.sexualOrientation
            this.height.value = decoder.decodeIfPresent("height") ?? this.height.value
            this.shoulderWidth.value = decoder.decodeIfPresent("shoulderWidth") ?? this.shoulderWidth.value
            this.armLength.value = decoder.decodeIfPresent("armLength") ?? this.armLength.value

            this.superDecode(decoder)
        }.bind(this))*/
    }
}

/// TBD
export class PhoneNumber  {
    /// A phone number with an area code.
    phoneNumber
    /// TBD
    type

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.phoneNumber = decoder.decodeIfPresent("phoneNumber") ?? this.phoneNumber
            this.type = decoder.decodeIfPresent("type") ?? this.type

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class PublicKey  {
    /// TBD
    type
    /// TBD
    key
    /// The name of the item.
    name

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.key = decoder.decodeIfPresent("key") ?? this.key
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class SchemaSession  {
    /// TBD
    currentViewIndex: number = 0
    /// TBD
    editMode: boolean = false
    /// The name of the item.
    name
    /// TBD
    showContextPane: boolean = false
    /// TBD
    showFilterPanel: boolean = false

    /// TBD
    get screenshot() {
        return this.edge("screenshot")?.target(File)
    }

    /// TBD
    get views() {
        return this.edges("view")?.sorted("sequence").items(SessionView)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.currentViewIndex = decoder.decodeIfPresent("currentViewIndex") ?? this.currentViewIndex
            this.editMode = decoder.decodeIfPresent("editMode") ?? this.editMode
            this.name = decoder.decodeIfPresent("name") ?? this.name
            this.showContextPane = decoder.decodeIfPresent("showContextPane") ?? this.showContextPane
            this.showFilterPanel = decoder.decodeIfPresent("showFilterPanel") ?? this.showFilterPanel

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class SchemaSessions  {
    /// TBD
    currentSessionIndex: number = 0

    /// TBD
    get sessions() {
        return this.edges("session")?.sorted("sequence").items(Session)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.currentSessionIndex = decoder.decodeIfPresent("currentSessionIndex") ?? this.currentSessionIndex

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class SessionView  {
    /// The name of the item.
    name

    /// TBD
    get datasource() {
        return this.edge("datasource")?.target(Datasource)
    }

    /// TBD
    get session() {
        return this.edge("session")?.target(Session)
    }

    /// TBD
    get userState() {
        return this.edge("userState")?.target(UserState)
    }

    /// TBD
    get viewDefinition() {
        return this.edge("viewDefinition")?.target(CVUStoredDefinition)
    }

    /// TBD
    get viewArguments() {
        return this.edge("viewArguments")?.target(ViewArguments)
    }

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.name = decoder.decodeIfPresent("name") ?? this.name

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class Setting  {
    /// TBD
    key
    /// TBD
    json

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.key = decoder.decodeIfPresent("key") ?? this.key
            this.json = decoder.decodeIfPresent("json") ?? this.json

            this.superDecode(decoder)
        }.bind(this))
    }
}

/// TBD
export class SyncState {
    updatedFields = []
    /// TBD
    isPartiallyLoaded: boolean = false
    /// TBD
    actionNeeded
    /// TBD
    changedInThisSession: boolean = false

    constructor(decoder) {
        //

        jsonErrorHandling(function () {
            this.isPartiallyLoaded = decoder.decodeIfPresent("isPartiallyLoaded") ?? this.isPartiallyLoaded
            this.actionNeeded = decoder.decodeIfPresent("actionNeeded") ?? this.actionNeeded
            this.changedInThisSession = decoder.decodeIfPresent("changedInThisSession") ?? this.changedInThisSession
        }.bind(this))
    }
}

/// TBD
export class Website  {
    /// TBD
    type
    /// URL of the item.
    url

    constructor(decoder) {
        

        jsonErrorHandling(function () {
            this.type = decoder.decodeIfPresent("type") ?? this.type
            this.url = decoder.decodeIfPresent("url") ?? this.url

            this.superDecode(decoder)
        }.bind(this))
    }
}

export function dataItemListToArray(object) {
    var collection = []
    if (!Array.isArray(object) || !object.length) return
    if (object[0] instanceof Item) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof AuditItem) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Company) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof CreativeWork) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof DigitalDocument) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Comment) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Note) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof MediaObject) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Audio) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Photo) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Video) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof CVUStoredDefinition) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Device) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Diet) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Downloader) { object.forEach(function (item) {collection.push(item)}) }
    //else if (object[0] instanceof Edge) { return object.itemsArray() }
    else if (object[0] instanceof File) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Importer) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof ImporterRun) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Indexer) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof IndexerRun) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Label) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Location) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Address) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Country) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof MedicalCondition) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof NavigationItem) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof OnlineProfile) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Person) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof PhoneNumber) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof PublicKey) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Session) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Sessions) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof SessionView) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Setting) { object.forEach(function (item) {collection.push(item)}) }
    else if (object[0] instanceof Website) { object.forEach(function (item) {collection.push(item)}) }

    return collection
}
